% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_skeleton.R
\name{plot_skeleton}
\alias{plot_skeleton}
\title{Plots the 1-skeleton of a simplicial complex.}
\usage{
plot_skeleton(g2, r, g, b, k, pushforward = mean, seed = 10,
  iterations = 1500, file = "")
}
\arguments{
\item{g2}{an object of the class \code{simplicial} containing the nerve complex.}

\item{r}{a numeric vector or matrix specifying one or more functions with
support on the set of points that will be mapped to the red channel. Each column
corresponds to a point and each row specifies a different function. If more than one
function is specified, the average of all rows is considered.}

\item{g}{similar to \code{r} but mapped to the green channel.}

\item{b}{similar to \code{r} but mapped to the blue channel.}

\item{k}{similar to \code{r} but mapped to a rainbow palette. Incompatible with
the parameters \code{r}, \code{g}, and \code{b}.}

\item{pushforward}{pushforward function that maps \code{r}, \code{g}, \code{b},
and \code{k} to functions with support on the simplices. By default is set to
\code{mean}. Other choices may slow down the computation substantially.}

\item{seed}{integer specifying the seed used to initialize the force-directed layout. By
default is set to 10.}

\item{iterations}{number of iterations used in the Force Atlas 2 layout. By default is set
to 1500. A larger value may be required for optimal visualization of large graphs.}

\item{file}{if specified, exports the 1-skeleton to graphviz DOT \code{file}}
}
\description{
Plots the 1-skeleton graph of a nerve complex and colors the vertices according
to the value of one or more functions with support on the underlying set of points. The 1-skeleton
is visualized using a force-directed graph layout with node sizes proportional to the
number of points in the corresponding open set.
}
\examples{
library(RayleighSelection)
# Load pre-processed LFW dataset (aligned, cropped, and normalized)
data("lfw")

# Compute reduced representation using Laplacian eigenmap of pixels with high variance
library(dimRed)
leim <- LaplacianEigenmaps()
lfw_top <- lfw[apply(lfw, 1, var) > 0.9,]
emb <- leim@fun(as(t(lfw_top), "dimRedData"), leim@stdpars)

# Compute Mapper representation using the Laplacian eigenmap as an auxiliary function and correlation
# distance as metric
library(TDAmapper)
lfw_distances <- (1.0 - cor(lfw_top))
m2 <- mapper2D(distance_matrix = lfw_distances,
               filter_values = list(emb@data@data[,1], emb@data@data[,2]),
               num_intervals = c(40,40),
               percent_overlap = 30,
               num_bins_when_clustering = 10);

# Compute the nerve complex
gg <- nerve_complex(m2$points_in_vertex)

# Plot the skeleton of the nerve complex colored by the intensity of the 1063rd pixel
plot_skeleton(gg, k=as.numeric(lfw[1063,]))

}
