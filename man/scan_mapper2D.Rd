% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scan_mapper2D.R
\name{scan_mapper2D}
\alias{scan_mapper2D}
\title{Evaluates the significance of a feature across the parameter space of Mapper.}
\usage{
scan_mapper2D(f, distance_matrix, filter_values, num_intervals_min,
  num_intervals_max, num_intervals_steps = 10, percent_overlap_min,
  percent_overlap_max, percent_overlap_steps = 10,
  num_bins_when_clustering = 10, shift = 0, num_perms = 1000, seed = 10,
  num_cores = 1, significance_threshold = 0.05)
}
\arguments{
\item{f}{a numeric vector specifying the function with support on the set of points
whose significance will assesed.}

\item{distance_matrix}{a matrix of pairwise dissimilarities associated to the high
dimensional point cloud.}

\item{filter_values}{a list of two numeric vectors containing the values of the two
filter functions in the point cloud.}

\item{num_intervals_min}{a list of two integers specifying the minimum value for the \code{num_intervals}
parameter of \code{mapper2D} to be used in the scan.}

\item{num_intervals_max}{a list of two integers specifying the maximum value for the \code{num_intervals}
parameter of \code{mapper2D} to be used in the scan.}

\item{percent_overlap_min}{a number between 0 and 100 specifying the minimum value for the
\code{percent_overlap} parameter of \code{mapper2D} to be used in the scan.}

\item{percent_overlap_max}{a number between 0 and 100 specifying the maximum value for the
\code{percent_overlap} parameter of \code{mapper2D} to be used in the scan.}

\item{percent_overlap_steps}{an integer specifying the number of steps for the \code{percent_overlap}
parameter of \code{mapper2D} to be used in the scan. By default it is set to 10.}

\item{num_bins_when_clustering}{a positive integer specifying the value of the \code{num_bins_when_clustering}
parameter of \code{mapper2D} to be used in the scan. By default it is set to 10.}

\item{shift}{real number specifying a shift that is added to \code{f}. Shifts are useful to
reduce the statistical power and rank very significant features without the need of using a
too large number of permutations. By default is set to 0.}

\item{num_perms}{a positive integer specifying the number of permutations used to build the null distribution for each
feature. By default it is set to 1000.}

\item{seed}{integer specifying the seed used to initialize the generator of permutations.
By default is set to 10.}

\item{num_cores}{integer specifying the number of cores to be used in the computation. By
default only one core is used.}

\item{significance_threshold}{level of significance to be indicated in the output.}

\item{num_intervals_step}{an integer specifying the number of steps for the \code{num_intervals}
parameter of \code{mapper2D} to be used in the scan. By default it is set to 10.}
}
\value{
A data frame listing the p-value, q-value, and Rayleigh quotient score of the
feature \code{f} for each configuration of parameters of \code{mapper2D}. The distribution
of p-values and Rayleigh quotient scores across the space of parameters of \code{mapper2D}
are visualized as heatmaps.
}
\description{
A natural way to generate a nerve complex from a point cloud is to use the Mapper algorithm,
implemented in the package \code{TDAmapper}. The function \code{scan_mapper2D} asseses the
significance of a feature in the nerve complexes that result across a region of the
parameter space of Mapper.
}
\examples{
library(RayleighSelection)
# Load pre-processed LFW dataset (aligned, cropped, and normalized)
data("lfw")

# Compute reduced representation using Laplacian eigenmap of pixels with high variance
library(dimRed)
leim <- LaplacianEigenmaps()
lfw_top <- lfw[apply(lfw, 1, var) > 0.9,]
emb <- leim@fun(as(t(lfw_top), "dimRedData"), leim@stdpars)

# Compute correlation distance using pixels with high variance
lfw_distances <- (1.0 - cor(lfw_top))

# Evaluate the significance of the R score of the 6907th pixel accross a section of the
# Mapper parameter space
scan_mapper2D(lfw[6907,],
              lfw_distances,
              list(emb@data@data[,1], emb@data@data[,2]),
              c(20,20), c(50,50), 10, 20, 50, 10, shift = 10.0)

}
